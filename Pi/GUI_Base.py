#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Jun 17, 2018 04:29:46 PM

import sys
import picamera
import threading
import time

leftSpeed = rightSpeed = frontSpeed = backSpeed = trianglePress = 0

camera = picamera.PiCamera()

def screenshot():
    global amount
    amount = 0
    AmountFile = open('Photos/amount', 'r')
    x = AmountFile.readline().strip()
    try:
        amount = int(x)
    except ValueError:
        print("WHY??")
    AmountFile.close()
    camera.capture('Photos/' + 'snapshot' + str(amount) + '.jpg')
    amount += 1
    WriteAmount = open('Photos/amount', 'w')
    WriteAmount.write("%d" % amount)

cli = 0
def create_controller():
    global cli
    import ControllerClient as cli
def gather_data():
    print("This thing on???")
    global leftSpeed, rightSpeed, frontSpeed, backSpeed, trianglePress
    while True:
        print("lol xD")
        leftSpeed = cli.leftSpeed
        rightSpeed = cli.rightSpeed
        frontSpeed = cli.frontSpeed
        backSpeed = cli.backSpeed
        trianglePress = cli.trianglePress
        if trianglePress == 1:
            screenshot()
            time.sleep(1)

cli_thread = threading.Thread(target=create_controller)
cli_thread.daemon = True
cli_thread.start()
gatherControllerData = threading.Thread(target=gather_data)
gatherControllerData.daemon = True
gatherControllerData.start()

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


# import GUI_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel(root)
    root.mainloop()


w = None


def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    root.withdraw()
    return (w, top)


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel():
    def __init__(self, top=None):
        global leftSpeed, rightSpeed, frontSpeed, backSpeed
        self.text_roll = self.text_yaw = self.text_pitch = self.text_temperature = self.text_depth = "0"
        self.leftSpeed = 0
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1280x720+0+0")
        top.title("ROV Command Hub")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.CameraFrame = Frame(top)
        self.CameraFrame.place(relx=0.59, rely=0.03, relheight=0.51, relwidth=0.39)
        self.CameraFrame.configure(borderwidth="2")
        self.CameraFrame.configure(relief=GROOVE)
        self.CameraFrame.configure(background="#d9d9d9")
        self.CameraFrame.configure(highlightbackground="#d9d9d9")
        self.CameraFrame.configure(highlightcolor="black")
        self.CameraFrame.configure(width=530)
        camera.start_preview(fullscreen=False, window = (620, 2, 650, 450))

        self.ModelFrame = Frame(top)
        self.ModelFrame.place(relx=0.01, rely=0.03, relheight=0.51, relwidth=0.39)
        self.ModelFrame.configure(borderwidth="2")
        self.ModelFrame.configure(relief=GROOVE)
        self.ModelFrame.configure(background="#FFFFFF")
        self.ModelFrame.configure(highlightbackground=None)
        self.ModelFrame.configure(highlightcolor=None)
        self.ModelFrame.configure(width=535)

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.01, rely=0.65, relheight=0.27, relwidth=0.96)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")
        self.Frame3.configure(width=1305)

        self.TLabel1 = ttk.Label(self.Frame3)
        self.TLabel1.place(relx=0.01, rely=0.05, height=16, width=219)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Displacement (from Horn):''')

        self.RollLabel = ttk.Label(self.Frame3)
        self.RollLabel.place(relx=0.01, rely=0.24, height=16, width=200)
        self.RollLabel.configure(background="#d9d9d9")
        self.RollLabel.configure(foreground="#000000")
        self.RollLabel.configure(font="TkDefaultFont")
        self.RollLabel.configure(relief=FLAT)
        self.RollLabel.configure(text=self.text_roll)

        self.PitchLabel = ttk.Label(self.Frame3)
        self.PitchLabel.place(relx=0.01, rely=0.34, height=16, width=171)
        self.PitchLabel.configure(background="#d9d9d9")
        self.PitchLabel.configure(foreground="#000000")
        self.PitchLabel.configure(font="TkDefaultFont")
        self.PitchLabel.configure(relief=FLAT)
        self.PitchLabel.configure(text=self.text_pitch)

        self.YawLabel = ttk.Label(self.Frame3)
        self.YawLabel.place(relx=0.01, rely=0.44, height=16, width=83)
        self.YawLabel.configure(background="#d9d9d9")
        self.YawLabel.configure(foreground="#000000")
        self.YawLabel.configure(font="TkDefaultFont")
        self.YawLabel.configure(relief=FLAT)
        self.YawLabel.configure(text=self.text_yaw)

        self.leftSpeed = IntVar()
        self.rightSpeed = IntVar()
        self.frontSpeed = IntVar()
        self.backSpeed = IntVar()

        self.frontSpeed_name = ttk.Label(self.Frame3)
        self.frontSpeed_name.place(relx=0.625, rely=0.04, height=16, width=140)
        self.frontSpeed_name.configure(text="Front Motor Speed")
        self.fspeed_bar = ttk.Progressbar(self.Frame3)
        self.fspeed_bar.place(relx=0.61, rely=0.12, height=16, width=171)
        self.fspeed_bar.configure(maximum=1998)
        self.fspeed_bar.configure(variable=self.frontSpeed)

        self.leftSpeed_name = ttk.Label(self.Frame3)
        self.leftSpeed_name.place(relx=0.525, rely=0.34, height=16, width=140)
        self.leftSpeed_name.configure(text="Left Motor Speed")
        self.lspeed_bar = ttk.Progressbar(self.Frame3)
        self.lspeed_bar.place(relx=0.51, rely=0.42, height=16, width=171)
        self.lspeed_bar.configure(maximum=1998)
        self.lspeed_bar.configure(variable=self.leftSpeed)

        self.rightSpeed_name = ttk.Label(self.Frame3)
        self.rightSpeed_name.place(relx=0.695, rely=0.34, height=16, width=140)
        self.rightSpeed_name.configure(text="Right Motor Speed")
        self.rspeed_bar = ttk.Progressbar(self.Frame3)
        self.rspeed_bar.place(relx=0.68, rely=0.42, height=16, width=171)
        self.rspeed_bar.configure(maximum=1998)
        self.rspeed_bar.configure(variable=self.rightSpeed)

        self.backSpeed_name = ttk.Label(self.Frame3)
        self.backSpeed_name.place(relx=0.625, rely=0.64, height=16, width=140)
        self.backSpeed_name.configure(text="Back Motor Speed")
        self.bspeed_bar = ttk.Progressbar(self.Frame3)
        self.bspeed_bar.place(relx=0.61, rely=0.72, height=16, width=171)
        self.bspeed_bar.configure(maximum=1998)
        self.bspeed_bar.configure(variable=self.backSpeed)

        self.Button1 = Button(top)
        self.Button1.place(relx=0.48, rely=0.54, height=66, width=655)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(command=screenshot)
        self.Button1.configure(text='''Take Photo''')
        self.Button1.configure(width=520)

        self.updateData()


    def updateData(self):
        global leftSpeed, rightSpeed, frontSpeed, backSpeed
        # raw_data writes to data.txt for the gui and model to read
        f = open('data.txt', 'r')
        self.data = (f.readlines()[-1])[1:-2].split(',')
        # print(data[0])
        self.pitch = float(self.data[0])
        self.roll = float(self.data[1])
        self.yaw = float(self.data[2])
        self.temperature = float(self.data[3])
        self.depth = float(self.data[4])
        f.close()

        self.text_pitch = "Pitch: " + str(self.pitch)
        self.PitchLabel.configure(text=self.text_pitch)

        self.text_roll = ("Roll (Must be near 0): " + str(self.roll))
        self.RollLabel.configure(text=self.text_roll)

        self.text_yaw = ("Yaw: " + str(self.yaw))
        self.YawLabel.configure(text=self.text_yaw)

        self.leftSpeed.set(leftSpeed)
        self.rightSpeed.set(rightSpeed)
        self.frontSpeed.set(frontSpeed)
        self.backSpeed.set(backSpeed)
        self.lspeed_bar.configure(variable=self.leftSpeed)
        self.rspeed_bar.configure(variable=self.rightSpeed)
        self.fspeed_bar.configure(variable=self.frontSpeed)
        self.bspeed_bar.configure(variable=self.backSpeed)


        # updates the Labels every 100 ms
        self.Frame3.after(100, self.updateData)


if __name__ == '__main__':
    vp_start_gui()

